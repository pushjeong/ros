class Arithmetic(metaclass=Metaclass_Arithmetic):
    from custom_interface.srv._arithmetic import Arithmetic_Request as Request
    from custom_interface.srv._arithmetic import Arithmetic_RESPONSE as Response
    
    def__init__(self):
       raise NotImplementedError('Service classes can not be instantiated')
       

class Arithmetic_Request(metaclass=Metaclass_Arithmetic_Request):
    from custom_interface.srv._arithmetic import Arithmetic_Request as Request
    from custom_interface.srv._arithmetic import Arithmetic_RESPONSE as Response
    
       def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))

        self.a = kwargs.get('a', int())
        self.b = kwargs.get('b', int())
        self.op = kwargs.get('op', str())
        
class Arithmetic_Response(metaclass=Metaclass_Arithmetic_Response):
    from custom_interface.srv._arithmetic import Arithmetic_Request as Request
    from custom_interface.srv._arithmetic import Arithmetic_RESPONSE as Response
    
    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))

        self.result = kwargs.get('result', int())
     
    
